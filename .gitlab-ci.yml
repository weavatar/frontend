image: node:lts-alpine

# 在每个任务执行前运行
before_script:
  - npm set registry https://registry.npmmirror.com/
  - npm install -g pnpm
  - pnpm set registry https://registry.npmmirror.com/
  - pnpm install

.cache:
  cache:
    paths:
      - node_modules/

stages:
  - prepare
  - build
  - deploy

lint:
  stage: prepare
  extends: .cache
  allow_failure: true
  script:
    - pnpm lint

test-unit:
  stage: prepare
  extends: .cache
  script:
    - pnpm test:unit --run

build_development:
  stage: build
  extends: .cache
  script:
    - echo VITE_API_URL=https://dev.weavatar.com/api > .env
    - pnpm build
    - mv dist $OUTPUT_NAME@development
  artifacts:
    name: "$OUTPUT_NAME@development"
    paths:
      - $OUTPUT_NAME@development
    expire_in: 1 week

build_production:
  stage: build
  extends: .cache
  only:
    - main
  script:
    - echo VITE_API_URL=https://weavatar.com/api > .env
    - pnpm build
    - mv dist $OUTPUT_NAME@production
  artifacts:
    name: "$OUTPUT_NAME@production"
    paths:
      - $OUTPUT_NAME@production
    expire_in: 1 week

deploy_development:
  stage: deploy
  image: alpine:latest
  extends: .cache
  environment:
    name: development
    url: https://dev.weavatar.com
  dependencies:
    - build_development
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/mirror.sjtu.edu.cn/g' /etc/apk/repositories
    - apk add --no-cache openssh-client sshpass zip
  script:
    - zip -r $OUTPUT_NAME.zip $OUTPUT_NAME@development/
    - sshpass -p $DEVELOPMENT_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $DEVELOPMENT_SERVER_PORT $DEVELOPMENT_SERVER_USER@$DEVELOPMENT_SERVER_IP "rm -rf $DEVELOPMENT_SERVER_PATH/*" || true
    - sshpass -p $DEVELOPMENT_SERVER_PASSWORD scp -o StrictHostKeyChecking=no -P $DEVELOPMENT_SERVER_PORT -r $OUTPUT_NAME.zip $DEVELOPMENT_SERVER_USER@$DEVELOPMENT_SERVER_IP:$DEVELOPMENT_SERVER_PATH
    - sshpass -p $DEVELOPMENT_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $DEVELOPMENT_SERVER_PORT $DEVELOPMENT_SERVER_USER@$DEVELOPMENT_SERVER_IP "cd $DEVELOPMENT_SERVER_PATH && unzip -o $OUTPUT_NAME.zip && rm -rf $OUTPUT_NAME.zip && mv $OUTPUT_NAME@development/* . && rm -rf $OUTPUT_NAME@development"
    - sshpass -p $DEVELOPMENT_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $DEVELOPMENT_SERVER_PORT $DEVELOPMENT_SERVER_USER@$DEVELOPMENT_SERVER_IP "chmod -R 755 $DEVELOPMENT_SERVER_PATH && chown -R www:www $DEVELOPMENT_SERVER_PATH"

deploy_production:
  stage: deploy
  image: alpine:latest
  extends: .cache
  environment:
    name: production
    url: https://weavatar.com
  only:
    - main
  dependencies:
    - build_production
  before_script:
    - sed -i 's/dl-cdn.alpinelinux.org/mirror.sjtu.edu.cn/g' /etc/apk/repositories
    - apk add --no-cache openssh-client sshpass zip
  script:
    - zip -r $OUTPUT_NAME.zip $OUTPUT_NAME@production/
    - sshpass -p $PRODUCTION_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $PRODUCTION_SERVER_PORT $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER_IP "rm -rf $PRODUCTION_SERVER_PATH/*" || true
    - sshpass -p $PRODUCTION_SERVER_PASSWORD scp -o StrictHostKeyChecking=no -P $PRODUCTION_SERVER_PORT -r $OUTPUT_NAME.zip $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER_IP:$PRODUCTION_SERVER_PATH
    - sshpass -p $PRODUCTION_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $PRODUCTION_SERVER_PORT $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER_IP "cd $PRODUCTION_SERVER_PATH && unzip -o $OUTPUT_NAME.zip && rm -rf $OUTPUT_NAME.zip && mv $OUTPUT_NAME@production/* . && rm -rf $OUTPUT_NAME@production"
    - sshpass -p $PRODUCTION_SERVER_PASSWORD ssh -o StrictHostKeyChecking=no -p $PRODUCTION_SERVER_PORT $PRODUCTION_SERVER_USER@$PRODUCTION_SERVER_IP "chmod -R 755 $PRODUCTION_SERVER_PATH && chown -R www:www $PRODUCTION_SERVER_PATH"
